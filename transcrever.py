#MPfSMl - Medical pratice for Students on Machine learn 
#Niedson Emanoel, 21/04/2025.

import whisper
import argparse
import os
from datetime import datetime
import torch
import nltk
from nltk.corpus import stopwords
import string
import requests
import markdown
from weasyprint import HTML
import shutil
from google import genai
import json
import genanki
import random

# L√™ a chave da API do arquivo gemini.key
with open("gemini.key", "r") as file:
    API_KEY = file.read().strip()

URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"

notion_style = """
<style>
  body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      max-width: 800px;
      margin: 40px auto;
      padding: 20px;
      line-height: 1.6;
      font-size: 16px;
      color: #333;
      background: #fff;
  }

  h1, h2, h3 {
      border-bottom: 1px solid #eaeaea;
      padding-bottom: 0.3em;
      margin-top: 1.4em;
  }

  code {
      background-color: #f6f8fa;
      padding: 2px 4px;
      border-radius: 3px;
      font-size: 90%;
      font-family: 'Courier New', Courier, monospace;
  }

  pre code {
      background-color: #f6f8fa;
      display: block;
      padding: 1em;
      overflow-x: auto;
  }

  blockquote {
      border-left: 4px solid #dfe2e5;
      padding: 0 1em;
      color: #6a737d;
  }

  table {
      border-collapse: collapse;
      width: 100%;
  }

  th, td {
      border: 1px solid #dfe2e5;
      padding: 6px 13px;
  }

  th {
      background-color: #f6f8fa;
  }

  @page {
      margin: 20mm;
  }
</style>
"""

headers = {
    "Content-Type": "application/json"
}

def argumentos_cli():
    parser = argparse.ArgumentParser(description="Transcri√ß√£o e resumo de aulas com Whisper + Gemini")

    parser.add_argument('--audio', type=str, help='Caminho para o arquivo de √°udio a ser processado')
    parser.add_argument('--modelo', type=str, default='base', help='Modelo do Whisper a ser usado (base, small, medium, large, etc.)')

    return parser.parse_args()

def gerar_pdf_markdown(markdown_text, pasta_destino, nome_pdf):
    html_content = markdown.markdown(markdown_text, extensions=["extra", "tables", "fenced_code"])
    full_html = f"<!DOCTYPE html><html><head><meta charset='utf-8'>{notion_style}</head><body>{html_content}</body></html>"
    caminho_pdf = os.path.join(pasta_destino, nome_pdf)
    HTML(string=full_html).write_pdf(caminho_pdf)
    print(f"‚úÖ PDF gerado com sucesso: {caminho_pdf}")

def gerar_guia_estudos_markdown(transcricao: str) -> tuple[str, str]:
    prompt_estudo = f"""
A partir do conte√∫do abaixo (resumo), crie uma guia de estudos personalizada em formato Markdown, com foco em aprendizado acad√™mico e m√©dico.

A resposta ser√° convertida em PDF, ent√£o:

- Use formata√ß√£o Markdown limpa
- Use t√≠tulos, listas e divis√µes visuais claras
- N√£o inclua elementos interativos ou links clic√°veis

Contexto essencial:

Este resumo foi gerado a partir de um sistema automatizado que converte √°udios de estudo em texto. A partir dele, ser√£o produzidos:

- Quest√µes objetivas e cl√≠nicas, classificadas por dificuldade
- Flashcards com os principais pontos e termos

Por isso, a guia de estudos deve:

- Indicar os conhecimentos pr√©vios essenciais para compreender o tema
- Apresentar um checklist organizado com o que estudar primeiro
- Explicar como e quando utilizar as quest√µes e flashcards gerados
- Evitar sugest√µes gen√©ricas como "ensinar a algu√©m" ou "fazer resumos pr√≥prios"

A estrutura da resposta deve ser:

# Guia de Estudos: [Tema do Resumo]

## Vis√£o Geral
Descreva em poucas linhas o tema central e sua relev√¢ncia m√©dica.

## Pr√©-requisitos
Liste t√≥picos que o estudante deve dominar antes de aprofundar o conte√∫do. Ex: anatomia relacionada, princ√≠pios b√°sicos, etc.

## Checklist de Estudo
Organize os principais pontos do conte√∫do em forma de lista ordenada. Cada item deve representar uma etapa de estudo.

## Aplica√ß√£o Direta
Oriente o estudante a:

- Usar as quest√µes geradas para treinar sua compreens√£o e identificar lacunas
- Utilizar os flashcards para revis√£o cont√≠nua e memoriza√ß√£o
- Revisar frequentemente os erros nas quest√µes para refor√ßar √°reas fr√°geis

N√£o inclua sugest√µes gen√©ricas como ensinar o conte√∫do para outra pessoa.

## Plano de Estudo Sugerido
Organize um cronograma de revis√£o dividido por dias (ex: 3, 7 ou 14 dias), integrando o uso das quest√µes e dos flashcards gerados com o resumo.

Resumo para base do estudo:
{transcricao}
"""

    with open("gemini.key", "r") as file:
        API_KEY = file.read().strip()

    URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"
    headers = {"Content-Type": "application/json"}

    data = {"contents": [{"parts": [{"text": prompt_estudo}]}]}

    response = requests.post(URL, headers=headers, json=data)

    if response.status_code == 200:
        result = response.json()
        markdown_raw = result['candidates'][0]['content']['parts'][0]['text']
        
        markdown_clean = markdown_raw.strip().split("\n", 1)[-1].strip()  # Clean and trim the result
        
        titulo = next((line.strip("# ").strip() for line in markdown_clean.split("\n") if line.startswith("# ")), "Guia")
        return f"{titulo}.pdf", markdown_clean
    else:
        raise Exception(f"Erro na requisi√ß√£o: {response.status_code}\n{response.text}")

def gerar_resumo_markdown(transcricao: str) -> tuple[str, str]:
    prompt = f"""
Sem fornecer nenhum tipo de feedback, coment√°rio ou explica√ß√£o adicional, gere um resumo completo e did√°tico da transcri√ß√£o da aula que vou enviar a seguir. O objetivo √© facilitar a compreens√£o de um aluno de medicina, ent√£o complemente com informa√ß√µes relevantes sempre que considerar √∫til para a assimila√ß√£o do conte√∫do.

O resumo deve ser entregue em Markdown puro, como se fosse um c√≥digo-fonte, com t√≠tulos estilizados com emojis, no estilo visual do Notion.

Apenas retorne o conte√∫do em Markdown, sem nenhuma outra resposta textual.

Transcri√ß√£o da aula:
{transcricao}
"""

    data = {
        "contents": [
            {
                "parts": [
                    {"text": prompt}
                ]
            }
        ]
    }

    response = requests.post(URL, headers=headers, json=data)

    if response.status_code == 200:
        result = response.json()
        markdown_raw = result['candidates'][0]['content']['parts'][0]['text']

        if markdown_raw.startswith("```markdown") and markdown_raw.endswith("```"):
            markdown_clean = "\n".join(markdown_raw.strip().split("\n")[1:-1])
        else:
            markdown_clean = markdown_raw

        titulo = ""
        for line in markdown_clean.split("\n"):
            if line.strip().startswith("# "):
                titulo = line.strip("# ").strip()
                break

        titulo = titulo + '.pdf'
        return titulo, markdown_clean
    else:
        raise Exception(f"Erro na requisi√ß√£o: {response.status_code}\n{response.text}")

def escolher_dispositivo():
    return "cuda" if torch.cuda.is_available() else "cpu"

def formatar_timestamp(segundos):
    h, m = divmod(int(segundos), 3600)
    m, s = divmod(m, 60)
    return f"{h:02}:{m:02}:{s:02}"

def remover_stopwords(texto):
    try:
        stopwords.words('portuguese')
    except LookupError:
        nltk.download('stopwords')

    stop_words = set(stopwords.words("portuguese"))
    texto_sem_pontuacao = texto.translate(str.maketrans('', '', string.punctuation))
    palavras = texto_sem_pontuacao.split()

    palavras_filtradas = [
        palavra for palavra in palavras
        if palavra.lower() not in stop_words
    ]
    return " ".join(palavras_filtradas)

def transcrever_audio(caminho_audio, modelo="base", exportar=True, dispositivo="cpu"):
    if not os.path.exists(caminho_audio):
        raise FileNotFoundError(f"Arquivo n√£o encontrado: {caminho_audio}")

    print(f"üîç Carregando modelo Whisper '{modelo}' no dispositivo {dispositivo.upper()}...")
    model = whisper.load_model(modelo).to(dispositivo)

    print("üì° Transcrevendo √°udio...")
    resultado = model.transcribe(caminho_audio, verbose=False)

    com_tempos = []
    sem_tempos = []

    for s in resultado['segments']:
        texto = s['text'].strip()
        com_tempos.append(f"[{formatar_timestamp(s['start'])} - {formatar_timestamp(s['end'])}] {texto}")
        sem_tempos.append(texto)

    texto_com_tempos = "\n\n".join(com_tempos)
    texto_sem_tempos = " ".join(sem_tempos)
    texto_sem_tempos = remover_stopwords(texto_sem_tempos)

    print("\n‚úÖ Transcri√ß√£o finalizada!\n")
    if exportar:
        salvar_transcricoes(texto_com_tempos, texto_sem_tempos, caminho_audio)

    return texto_com_tempos, texto_sem_tempos

def salvar_transcricoes(com_tempos, sem_tempos, caminho_audio):
    base = os.path.splitext(os.path.basename(caminho_audio))[0]
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    arquivos = {
        f"com_tempos_{base}_{timestamp}.txt": com_tempos,
        f"sem_tempos_{base}_{timestamp}.txt": sem_tempos
    }

    for nome, conteudo in arquivos.items():
        with open(nome, "w", encoding="utf-8") as f:
            f.write(conteudo)
        print(f"üìÅ Arquivo salvo: {nome}")

def mover_arquivos_processados(pasta_destino, base_nome):
    extensoes = (".mp3", ".wav", ".m4a", ".txt", '.apkg')
    for arquivo in os.listdir("."):
        if base_nome in arquivo and arquivo.endswith(extensoes):
            origem = os.path.join(".", arquivo)
            destino = os.path.join(pasta_destino, arquivo)
            shutil.move(origem, destino)
            print(f"üì¶ Arquivo movido: {arquivo}")

def escolher_arquivo_audio(diretorio):
    arquivos_audio = [f for f in os.listdir(diretorio) if f.lower().endswith(('.mp3', '.wav', '.m4a'))]

    if len(arquivos_audio) == 0:
        print("‚ùå Nenhum arquivo de √°udio encontrado na raiz.")
        return None

    if len(arquivos_audio) == 1:
        return arquivos_audio[0]

    print("üîä M√∫ltiplos arquivos de √°udio encontrados. Escolha um para processar via flag --audio.")
    print('Ver documenta√ß√£o.')
    return (2/0)/0

def gerar_questoes_markdown(texto_base):
    prompt = f"""
    A partir do conte√∫do abaixo, crie 10 quest√µes de cada n√≠vel de dificuldade (f√°cil, m√©dio, dif√≠cil), com foco em refor√ßo de compreens√£o m√©dica e acad√™mica. Siga as regras:

    - Crie 10 quest√µes f√°ceis, 10 m√©dias e 10 dif√≠ceis.
    - N√£o agrupe as quest√µes em f√°ceis, m√©dias ou dificeis, o aluno s√≥ deve saber ao ver o gabarito.
    - Fa√ßa da quest√£o 01 at√© a 30, sem agrupar por dificuldade.
    - As respostas das quest√µes devem estar APENAS excluivamente na √°rea de gabaritos.
    - As quest√µes devem ser formuladas em formatos variados:
      - Quest√µes objetivas (com alternativas)
      - Quest√µes de resposta curta
      - Quest√µes de verdadeiro ou falso
      - Casos cl√≠nicos

    - As alternativas, ou as respostas curtas, devem ser realistas e educativas, com a resposta correta claramente identificada.
    - As alternativas devem ser equilibradas em dificuldade, sem nenhuma √≥bvia ou excessivamente f√°cil.
    - Cada quest√£o deve ser seguida de justificativa detalhada explicando o racioc√≠nio por tr√°s da resposta correta.
    - N√£o forne√ßa explica√ß√µes adicionais al√©m das instru√ß√µes acima.

    A sa√≠da deve estar no formato Markdown, com as quest√µes bem organizadas e agrad√°veis para visualiza√ß√£o e impress√£o. Evite usar links e mantenha a formata√ß√£o simples, para que as quest√µes sejam facilmente leg√≠veis e prontas para serem impressas. As alternativas devem ser listadas de forma clara, e cada justificativa deve vir logo ap√≥s a quest√£o correspondente.

    Para as quest√µes de resposta curta, inclua um espa√ßo de linhas (sublinhado) do tamanho necess√°rio para a resposta, usando a seguinte formata√ß√£o:
    ________________________

    Sa√≠da: Responda no formato Markdown com as seguintes informa√ß√µes:

    ### Quest√µes:
    
    1.  **Pergunta:** (enunciado da quest√£o)  
       - Alternativas:
         - A) Alternativa 1
         - B) Alternativa 2
         - C) Alternativa 3
         - D) Alternativa 4
         - E) Alternativa 5

    2.  **Pergunta:** (enunciado da quest√£o)  
       - Alternativas:
         - A) Verdadeiro
         - B) Falso (justificar aqui:______________________________)

    3. **Pergunta:** (enunciado da quest√£o)  
       **Resposta:**  
       _____________________________________________________________  

    Repita as 30 quest√µes, seguindo o mesmo formato

    ### Gabarito:
    1. **Resposta:** A  
       **Justificativa:** Explica√ß√£o detalhada do porqu√™ a alternativa A √© a correta.
       **N√≠vel: f√°cil/m√©dio/dif√≠cil**  

    2. **Resposta:** B  
       **Justificativa:** Explica√ß√£o detalhada do porqu√™ a alternativa B √© a correta.
       **N√≠vel: f√°cil/m√©dio/dif√≠cil**  

    3. **Resposta:** Falso  
       **Justificativa:** Explica√ß√£o detalhada do que tornou a quest√£o falsa ou verdadeira.
       **N√≠vel: f√°cil/m√©dio/dif√≠cil**  

    (Repita para todas as quest√µes)

    ### Texto base:
    {texto_base}
    """
        # L√™ a chave da API do arquivo gemini.key
    with open("gemini.key", "r") as file:
        API_KEY = file.read().strip()

    URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"
    headers = {"Content-Type": "application/json"}

    data = {"contents": [{"parts": [{"text": prompt}]}]}

    response = requests.post(URL, headers=headers, json=data)

    if response.status_code == 200:
        result = response.json()
        markdown_raw = result['candidates'][0]['content']['parts'][0]['text']
        
        markdown_clean = markdown_raw.strip().split("\n", 1)[-1].strip()  # Clean and trim the result
        
        titulo = 'questoes'
        return f"{titulo}.pdf", markdown_clean
    else:
        raise Exception(f"Erro na requisi√ß√£o: {response.status_code}\n{response.text}")

def gerarFlashcards(resumo):
    client = genai.Client(
        api_key=API_KEY
    )

    prompt = f"""

    A partir do conte√∫do abaixo (resumo da transcri√ß√£o), crie flashcards no formato JSON, com foco em aprendizado acad√™mico e m√©dico.

    A resposta ser√° convertida em .apkg, ent√£o:

    - Use formata√ß√£o JSON limpa, apenas o json sem nenhuma outra explica√ß√£o
    - Cada flashcard deve ser composto por uma pergunta e sua resposta
    - Inclua as informa√ß√µes m√©dicas essenciais, de forma objetiva e concisa

    Contexto essencial:

    Este conte√∫do ser√° usado para revis√µes r√°pidas e eficazes, com foco em memoriza√ß√£o ativa para estudantes de medicina. Para isso, os flashcards devem:

    - Apresentar perguntas cl√≠nicas relevantes baseadas no conte√∫do
    - Utilizar a estrutura "pergunta e resposta" de forma clara e objetiva
    - Evitar usar quest√µes muito gen√©ricas ou vagas

    Responda apenas com o JSON. N√£o adicione explica√ß√µes extras.

    A estrutura da resposta deve ser:

    **Pergunta:** [Texto da pergunta]
    **Resposta:** [Texto da resposta]

    Resumo para base dos flashcards:
        {resumo}
    """

    response = client.models.generate_content(
        model='gemini-2.0-flash',
        contents=prompt
    )
    # Remove a primeira e a √∫ltima linha da resposta
    preJson = '\n'.join(response.text.splitlines()[1:-1])

    # Converte string para JSON
    flashcards = json.loads(preJson)

    return(flashcards)

def criar_baralho(flashcards, nome_baralho):
    # IDs √∫nicos (voc√™ pode gerar novos com random.randint se quiser)
    modelo_id = 1607392319
    baralho_id = random.randint(1 << 28, (1 << 30) - 1)

    # Modelo do Anki
    modelo = genanki.Model(
        model_id=modelo_id,
        name='MPfSMl',
        fields=[
            {'name': 'Pergunta'},
            {'name': 'Resposta'},
        ],
        templates=[
            {
                'name': 'Cart√£o MPfSMl',
                'qfmt': '{{Pergunta}}',
                'afmt': '{{FrontSide}}<hr id="answer">{{Resposta}}',
            },
        ]
    )

    nameBaralho = 'MPfSMl::'+nome_baralho

    # Baralho
    baralho = genanki.Deck(
        deck_id=baralho_id,
        name=nameBaralho
    )

    # Adiciona flashcards
    for card in flashcards:
        nota = genanki.Note(
            model=modelo,
            fields=[card['Pergunta'], card['Resposta']]
        )
        baralho.add_note(nota)

    # Salva na raiz
    nome_arquivo = f'{nome_baralho}.apkg'
    genanki.Package(baralho).write_to_file(nome_arquivo)
    print(f'Baralho "{nome_arquivo}" criado com sucesso na raiz!')

# üß™ Execu√ß√£o direta
if __name__ == "__main__":
    #args = argumentos_cli()
    diretorio = "."  
    #arquivo_audio = args.audio if args.audio else escolher_arquivo_audio(diretorio)
    arquivo_audio = escolher_arquivo_audio(diretorio)

    if arquivo_audio:
        caminho_audio = os.path.join(diretorio, arquivo_audio)
        #modelo = args.modelo
        modelo = 'medium'
        dispositivo = escolher_dispositivo()

        # Usa o nome do arquivo de √°udio (sem extens√£o) para criar a pasta
        nome_arquivo_sem_ext = os.path.splitext(arquivo_audio)[0]
        pasta_destino = os.path.join("aulas_processadas", nome_arquivo_sem_ext)

        if os.path.exists(pasta_destino):
            print(f"‚ö†Ô∏è Esta aula j√° foi processada anteriormente: {pasta_destino}")
        else:
            os.makedirs(pasta_destino)
            try:
                withTime, noTime = transcrever_audio(caminho_audio, modelo=modelo, exportar=True, dispositivo=dispositivo)

                print("\nüìù Criando resumo")
                tituloMD, resumoMD = gerar_resumo_markdown(noTime)
                print("\n‚úÖ Resumo pronto!")

                print("\nüìù Criando guia de estudos")
                tituloGuia, guiaEstudos = gerar_guia_estudos_markdown(resumoMD)
                print("\n‚úÖ Guia de estudos pronto!")

                print("\nüìù Criando quest√µes")
                tituloQuestoes, QuestoesMD = gerar_questoes_markdown(resumoMD)
                print("\n‚úÖ Questoes prontas!")

                gerar_pdf_markdown(resumoMD, pasta_destino, "resumo.pdf")
                gerar_pdf_markdown(guiaEstudos, pasta_destino, "guia.pdf")
                gerar_pdf_markdown(QuestoesMD, pasta_destino, "questoes.pdf")

                # Mover os arquivos usados para a pasta destino
                mover_arquivos_processados(pasta_destino, nome_arquivo_sem_ext)

            except Exception as erro:
                print(f"‚ùå Erro: {erro}")
